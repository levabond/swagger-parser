//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class DefaultAPI {
    /**
     Вход

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersAuthControllerSignin(body: SigninRequest, completion: @escaping ((_ data: SigninResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersAuthControllerSigninWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Вход
     - POST /api/v1/auth/signin
     - 

     - examples: [{contentType=application/json, example={
  "user" : {
    "lives" : 1,
    "coins" : 1,
    "name" : "name",
    "id" : 1,
    "position" : 1,
    "avatar" : {
      "id" : 1,
      "url" : "http://example/image.jpg"
    },
    "email" : "email@mail.com",
    "username" : "username",
    "points" : 1
  },
  "token" : {
    "access_token" : "Большой и длинный токен",
    "refresh_token" : "Большой и длинный токен",
    "token_type" : "Bearer",
    "expires_in" : 1284000
  }
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<SigninResource> 
     */
    open class func appHttpControllersApiControllersAuthControllerSigninWithRequestBuilder(body: SigninRequest) -> RequestBuilder<SigninResource> {
        let path = "/api/v1/auth/signin"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigninResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Выйти

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersAuthControllerSignout(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersAuthControllerSignoutWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Выйти
     - DELETE /api/v1/auth/signout
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=""}]

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersAuthControllerSignoutWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/api/v1/auth/signout"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Регистрация

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersAuthControllerSignup(body: SignupRequest, completion: @escaping ((_ data: SigninResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersAuthControllerSignupWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Регистрация
     - POST /api/v1/auth/signup
     - 

     - examples: [{contentType=application/json, example={
  "user" : {
    "lives" : 1,
    "coins" : 1,
    "name" : "name",
    "id" : 1,
    "position" : 1,
    "avatar" : {
      "id" : 1,
      "url" : "http://example/image.jpg"
    },
    "email" : "email@mail.com",
    "username" : "username",
    "points" : 1
  },
  "token" : {
    "access_token" : "Большой и длинный токен",
    "refresh_token" : "Большой и длинный токен",
    "token_type" : "Bearer",
    "expires_in" : 1284000
  }
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<SigninResource> 
     */
    open class func appHttpControllersApiControllersAuthControllerSignupWithRequestBuilder(body: SignupRequest) -> RequestBuilder<SigninResource> {
        let path = "/api/v1/auth/signup"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<SigninResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Купить подсказку

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersCoinControllerBuyHint(body: BuyHintRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersCoinControllerBuyHintWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Купить подсказку
     - POST /api/v1/coins/buy_hint
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersCoinControllerBuyHintWithRequestBuilder(body: BuyHintRequest) -> RequestBuilder<Void> {
        let path = "/api/v1/coins/buy_hint"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Подтвердить участие в мультиплеерной викторине

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersGameMultiplayerQuizControllerApproveGame(body: ApproveGameRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersGameMultiplayerQuizControllerApproveGameWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Подтвердить участие в мультиплеерной викторине
     - POST /api/v1/games/multiplayer_quizzes/approve
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersGameMultiplayerQuizControllerApproveGameWithRequestBuilder(body: ApproveGameRequest) -> RequestBuilder<Void> {
        let path = "/api/v1/games/multiplayer_quizzes/approve"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Зафиксировать ответ в мультиплеерной викторине

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersGameMultiplayerQuizControllerSetAnswer(body: SetAnswerMultiplayerQuizRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersGameMultiplayerQuizControllerSetAnswerWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Зафиксировать ответ в мультиплеерной викторине
     - POST /api/v1/games/multiplayer_quizzes/set_answer
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersGameMultiplayerQuizControllerSetAnswerWithRequestBuilder(body: SetAnswerMultiplayerQuizRequest) -> RequestBuilder<Void> {
        let path = "/api/v1/games/multiplayer_quizzes/set_answer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Начать мультиплеерную викторину

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersGameMultiplayerQuizControllerStore(body: StoreMultiplayerQuizRequest, completion: @escaping ((_ data: GameMultiplayerQuizResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersGameMultiplayerQuizControllerStoreWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Начать мультиплеерную викторину
     - POST /api/v1/games/multiplayer_quizzes
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "second_user" : {
    "name" : "name",
    "id" : 1,
    "position" : 1,
    "avatar" : {
      "id" : 1,
      "url" : "http://example/image.jpg"
    },
    "username" : "username",
    "points" : 1
  },
  "questions" : [ {
    "hint" : "hint",
    "answers" : [ {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    }, {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    } ],
    "id" : 1,
    "value" : "value",
    "info" : "info"
  }, {
    "hint" : "hint",
    "answers" : [ {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    }, {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    } ],
    "id" : 1,
    "value" : "value",
    "info" : "info"
  } ],
  "id" : 1
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<GameMultiplayerQuizResource> 
     */
    open class func appHttpControllersApiControllersGameMultiplayerQuizControllerStoreWithRequestBuilder(body: StoreMultiplayerQuizRequest) -> RequestBuilder<GameMultiplayerQuizResource> {
        let path = "/api/v1/games/multiplayer_quizzes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GameMultiplayerQuizResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Завершить одиночную викторину

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersGameSingleQuizControllerFinish(body: FinishSingleQuizRequest, completion: @escaping ((_ data: FinishGameSingleQuizResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersGameSingleQuizControllerFinishWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Завершить одиночную викторину
     - POST /api/v1/games/single_quizzes/finish
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "lives" : 1,
  "coins" : 1,
  "points" : 1
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<FinishGameSingleQuizResource> 
     */
    open class func appHttpControllersApiControllersGameSingleQuizControllerFinishWithRequestBuilder(body: FinishSingleQuizRequest) -> RequestBuilder<FinishGameSingleQuizResource> {
        let path = "/api/v1/games/single_quizzes/finish"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<FinishGameSingleQuizResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Начать одиночную викторину

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersGameSingleQuizControllerStore(body: StoreSingleQuizRequest, completion: @escaping ((_ data: GameSingleQuizResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersGameSingleQuizControllerStoreWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Начать одиночную викторину
     - POST /api/v1/games/single_quizzes
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "questions" : [ {
    "hint" : "hint",
    "answers" : [ {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    }, {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    } ],
    "id" : 1,
    "value" : "value",
    "info" : "info"
  }, {
    "hint" : "hint",
    "answers" : [ {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    }, {
      "correct" : true,
      "id" : 1,
      "value" : "value"
    } ],
    "id" : 1,
    "value" : "value",
    "info" : "info"
  } ],
  "id" : 1
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<GameSingleQuizResource> 
     */
    open class func appHttpControllersApiControllersGameSingleQuizControllerStoreWithRequestBuilder(body: StoreSingleQuizRequest) -> RequestBuilder<GameSingleQuizResource> {
        let path = "/api/v1/games/single_quizzes"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<GameSingleQuizResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Получить список всех уровней по команде

     - parameter : (path) Идентификатор команды 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersLevelControllerAll(: , completion: @escaping ((_ data: [LevelResource]?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersLevelControllerAllWithRequestBuilder(: ).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получить список всех уровней по команде
     - GET /api/v1/levels/all
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "number" : 1,
  "id" : 1,
  "points" : 560
}, {
  "number" : 1,
  "id" : 1,
  "points" : 560
} ]}]
     - parameter : (path) Идентификатор команды 

     - returns: RequestBuilder<[LevelResource]> 
     */
    open class func appHttpControllersApiControllersLevelControllerAllWithRequestBuilder(: ) -> RequestBuilder<[LevelResource]> {
        var path = "/api/v1/levels/all"
        let PreEscape = "\()"
        let PostEscape = PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{team_id}", with: PostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[LevelResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Рейтинг

     - parameter : (path)  
     - parameter : (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersRatingControllerIndex(: , : , completion: @escaping ((_ data: RatingResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersRatingControllerIndexWithRequestBuilder(: , : ).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Рейтинг
     - GET /api/v1/ratings
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "meta" : {
    "per_page" : 1,
    "total" : 1,
    "last_page" : 1,
    "current_page" : 1
  },
  "items" : [ {
    "name" : "name",
    "id" : 1,
    "position" : 1,
    "avatar" : {
      "id" : 1,
      "url" : "http://example/image.jpg"
    },
    "username" : "username",
    "points" : 1
  }, {
    "name" : "name",
    "id" : 1,
    "position" : 1,
    "avatar" : {
      "id" : 1,
      "url" : "http://example/image.jpg"
    },
    "username" : "username",
    "points" : 1
  } ]
}}]
     - parameter : (path)  
     - parameter : (path)  

     - returns: RequestBuilder<RatingResource> 
     */
    open class func appHttpControllersApiControllersRatingControllerIndexWithRequestBuilder(: , : ) -> RequestBuilder<RatingResource> {
        var path = "/api/v1/ratings"
        let PreEscape = "\()"
        let PostEscape = PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{page}", with: PostEscape, options: .literal, range: nil)
        let PreEscape = "\()"
        let PostEscape = PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{per_page}", with: PostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<RatingResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Получить список всех команд по подкатегории (лиге)

     - parameter : (path) Идентификатор подкатегории (лиги) 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersTeamControllerAll(: , completion: @escaping ((_ data: [TeamResource]?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersTeamControllerAllWithRequestBuilder(: ).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получить список всех команд по подкатегории (лиге)
     - GET /api/v1/teams/all
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "image" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "name" : "name",
  "id" : 1
}, {
  "image" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "name" : "name",
  "id" : 1
} ]}]
     - parameter : (path) Идентификатор подкатегории (лиги) 

     - returns: RequestBuilder<[TeamResource]> 
     */
    open class func appHttpControllersApiControllersTeamControllerAllWithRequestBuilder(: ) -> RequestBuilder<[TeamResource]> {
        var path = "/api/v1/teams/all"
        let PreEscape = "\()"
        let PostEscape = PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{subcategory_id}", with: PostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[TeamResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Получить свой профиль

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersUserControllerMe(completion: @escaping ((_ data: UserResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersUserControllerMeWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получить свой профиль
     - GET /api/v1/users/me
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "lives" : 1,
  "coins" : 1,
  "name" : "name",
  "id" : 1,
  "position" : 1,
  "avatar" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "email" : "email@mail.com",
  "username" : "username",
  "points" : 1
}}]

     - returns: RequestBuilder<UserResource> 
     */
    open class func appHttpControllersApiControllersUserControllerMeWithRequestBuilder() -> RequestBuilder<UserResource> {
        let path = "/api/v1/users/me"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Обновить профиль

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersUserControllerUpdate(body: UserUpdateRequest, completion: @escaping ((_ data: UserResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersUserControllerUpdateWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Обновить профиль
     - PUT /api/v1/users/update
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "lives" : 1,
  "coins" : 1,
  "name" : "name",
  "id" : 1,
  "position" : 1,
  "avatar" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "email" : "email@mail.com",
  "username" : "username",
  "points" : 1
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<UserResource> 
     */
    open class func appHttpControllersApiControllersUserControllerUpdateWithRequestBuilder(body: UserUpdateRequest) -> RequestBuilder<UserResource> {
        let path = "/api/v1/users/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<UserResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
}
