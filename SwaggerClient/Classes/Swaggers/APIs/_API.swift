//
// _API.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire


open class _API {
    /**
     Обновить токен

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersAuthControllerRefreshToken(body: RefreshRequest, completion: @escaping ((_ data: TokenResource?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersAuthControllerRefreshTokenWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Обновить токен
     - POST /api/v1/auth/token/refresh
     - 

     - examples: [{contentType=application/json, example={
  "access_token" : "Большой и длинный токен",
  "refresh_token" : "Большой и длинный токен",
  "token_type" : "Bearer",
  "expires_in" : 1284000
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<TokenResource> 
     */
    open class func appHttpControllersApiControllersAuthControllerRefreshTokenWithRequestBuilder(body: RefreshRequest) -> RequestBuilder<TokenResource> {
        let path = "/api/v1/auth/token/refresh"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TokenResource>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Присвоить firebase токен

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersPushNotificationControllerUpdateFirebaseToken(body: UpdateFirebaseToken, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersPushNotificationControllerUpdateFirebaseTokenWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Присвоить firebase токен
     - PATCH /api/v1/push_notifications/firebase
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersPushNotificationControllerUpdateFirebaseTokenWithRequestBuilder(body: UpdateFirebaseToken) -> RequestBuilder<Void> {
        let path = "/api/v1/push_notifications/firebase"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Получить список всех видов спорта

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersSportControllerAll(completion: @escaping ((_ data: [SportResource]?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersSportControllerAllWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получить список всех видов спорта
     - GET /api/v1/sports/all
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "icon" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "id" : 1
}, {
  "name" : "name",
  "icon" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "id" : 1
} ]}]

     - returns: RequestBuilder<[SportResource]> 
     */
    open class func appHttpControllersApiControllersSportControllerAllWithRequestBuilder() -> RequestBuilder<[SportResource]> {
        let path = "/api/v1/sports/all"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[SportResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Получить список всех подкатегорий (лиг) по виду спорта

     - parameter : (path) Идентификатор вида спорта 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersSubcategoryControllerAll(: , completion: @escaping ((_ data: [SubcategoryResource]?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersSubcategoryControllerAllWithRequestBuilder(: ).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Получить список всех подкатегорий (лиг) по виду спорта
     - GET /api/v1/subcategories/all
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example=[ {
  "name" : "name",
  "icon" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "id" : 1
}, {
  "name" : "name",
  "icon" : {
    "id" : 1,
    "url" : "http://example/image.jpg"
  },
  "id" : 1
} ]}]
     - parameter : (path) Идентификатор вида спорта 

     - returns: RequestBuilder<[SubcategoryResource]> 
     */
    open class func appHttpControllersApiControllersSubcategoryControllerAllWithRequestBuilder(: ) -> RequestBuilder<[SubcategoryResource]> {
        var path = "/api/v1/subcategories/all"
        let PreEscape = "\()"
        let PostEscape = PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{sport_id}", with: PostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<[SubcategoryResource]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
    /**
     Удалить

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersUploaderControllerDelete(body: UploaderDeleteRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersUploaderControllerDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Удалить
     - DELETE /api/v1/uploader/delete
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersUploaderControllerDeleteWithRequestBuilder(body: UploaderDeleteRequest) -> RequestBuilder<Void> {
        let path = "/api/v1/uploader/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Удалить

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersUploaderControllerMediaDelete(body: UploaderMediaDeleteRequest, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersUploaderControllerMediaDeleteWithRequestBuilder(body: body).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     Удалить
     - DELETE /api/v1/uploader/media/delete
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - parameter body: (body)  

     - returns: RequestBuilder<Void> 
     */
    open class func appHttpControllersApiControllersUploaderControllerMediaDeleteWithRequestBuilder(body: UploaderMediaDeleteRequest) -> RequestBuilder<Void> {
        let path = "/api/v1/uploader/media/delete"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Загрузить

     - parameter body: (body)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersUploaderControllerUpload(body: UploadRequest, completion: @escaping ((_ data: InlineResponse201?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersUploaderControllerUploadWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Загрузить
     - POST /api/v1/uploader/upload
     - 

     - API Key:
       - type: apiKey Authorization 
       - name: bearer
     - examples: [{contentType=application/json, example={
  "id" : 1
}}]
     - parameter body: (body)  

     - returns: RequestBuilder<InlineResponse201> 
     */
    open class func appHttpControllersApiControllersUploaderControllerUploadWithRequestBuilder(body: UploadRequest) -> RequestBuilder<InlineResponse201> {
        let path = "/api/v1/uploader/upload"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<InlineResponse201>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }
    /**
     Кол-во зарегистрированных пользователей

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func appHttpControllersApiControllersUserControllerCount(completion: @escaping ((_ data: Int?,_ error: Error?) -> Void)) {
        appHttpControllersApiControllersUserControllerCountWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     Кол-во зарегистрированных пользователей
     - GET /api/v1/users/count
     - 

     - examples: [{contentType=application/json, example=0}]

     - returns: RequestBuilder<Int> 
     */
    open class func appHttpControllersApiControllersUserControllerCountWithRequestBuilder() -> RequestBuilder<Int> {
        let path = "/api/v1/users/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        let url = URLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Int>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }
}
